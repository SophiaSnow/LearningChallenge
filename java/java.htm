
<!DOCTYPE html>
<html lang="zh-cn">
<head>

<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-878633-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-878633-1');
</script>

<meta charset="gbk" />
 <link href="../css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" type="text/css" href="../css/c5.css" />

<title>Program</title>

</head>

<body class="browserscripting">

<div id="wrapper">

<div class="navbar navbar-inverse" role="navigation" id="menu-nav">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                <span class="sr-only">切换导航</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="#">我的学习手册</a>
        </div>
        <div class="navbar-collapse collapse">
            <ul class="nav navbar-nav">
                <li class="active"><a href="#top">Java</a></li>
                <li><a href="#summary-container">中文</a></li>
                <li class="dropdown">
                    <a href="../index.html" class="dropdown-toggle" data-toggle="dropdown">日语 <span class="caret"></span></a>   
                </li>
                <li><a href="#" data-toggle="modal" data-target="#about-modal">英语</a></li>
				<li><a href="">经典</a></li>
				<li><a href="#summary-container">Schedule</a></li>
				<li><a href="#summary-container">每日作文练习</a></li>
            </ul>
        </div>
    </div>
</div>

<div id="navsecond">

<div id="course">
<h2>Java异常与异常处理</h2>
<ul>
<li><a href="index.htm" title="JavaScript 教程">JS 教程</a></li>
<li><a href="js_intro.htm" title="JavaScript 简介">JS 简介</a></li>
<li class="currentLink"><a href="js_howto.htm" title="JavaScript 实现">JS 实现</a></li>
<li><a href="js_form_validation.htm" title="JavaScript 表单验证">JS 验证</a></li>
</ul>
<h2>Java字符串</h2>
<ul>
<li><a href="js_htmldom.htm" title="JavaScript HTML DOM">DOM 简介</a></li>
<li><a href="js_htmldom_html.htm" title="JavaScript HTML DOM - 改变 HTML">DOM HTML</a></li>
<li><a href="js_htmldom_css.htm" title="JavaScript HTML DOM - 改变 CSS">DOM CSS</a></li>
<li><a href="js_htmldom_events.htm" title="JavaScript HTML DOM 事件">DOM 事件</a></li>
<li><a href="js_htmldom_elements.htm" title="JavaScript HTML DOM 元素（节点）">DOM 节点</a></li>
</ul>
<h2>Java常用类</h2>
<ul>
<li><a href="js_objects.htm" title="JavaScript 对象">JS 对象</a></li>
<li><a href="js_obj_number.htm" title="JavaScript Number 对象">JS 数字</a></li>
<li><a href="js_obj_string.htm" title="JavaScript String 对象">JS 字符串</a></li>
<li><a href="js_obj_date.htm" title="JavaScript Date 对象">JS 日期</a></li>
<li><a href="js_obj_array.htm" title="JavaScript Array 对象">JS 数组</a></li>
<li><a href="js_obj_boolean.htm" title="JavaScript Boolean 对象">JS 逻辑</a></li>
<li><a href="js_obj_math.htm" title="JavaScript Math 对象">JS 算数</a></li>
<li><a href="js_obj_regexp.htm" title="JavaScript RegExp 对象">JS 正则表达式</a></li>
</ul>
<h2>Java集合框架</h2>
<ul>
<li><a href="" title="">集合框架概述</a></li>
<li><a href="" title="">JS Screen</a></li>
<li><a href="" title="">JS Cookies</a></li>
</ul>
<h2>JS 库</h2>
<ul>
<li><a href="js_libraries.htm" title="JavaScript 库">JS 库</a></li>
<li><a href="js_library_jquery.htm" title="JavaScript - 测试 jQuery">JS jQuery</a></li>
<li><a href="js_library_prototype.htm" title="JavaScript 测试 Prototype">JS Prototype</a></li>
</ul>
<h2>JS 实例和测验</h2>
<ul>
<li><a href="../example/jseg_examples.htm" title="JavaScript 实例">JS 实例</a></li>
<li><a href="../example/jsrf_examples.htm" title="JavaScript 对象实例">JS 对象实例</a></li>
<li><a href="js_quiz.htm" title="JavaScript 测验">JS 测验</a></li>
<li><a href="js_summary.htm" title="JavaScript 总结">JS 总结</a></li>
</ul>
<h2>JS 参考手册</h2>
<ul>
<li><a href="../jsref/index.htm" title="JavaScript 和 HTML DOM 参考手册">JavaScript 对象</a></li>
<li><a href="../jsref/index.htm" title="JavaScript 和 HTML DOM 参考手册">HTML DOM 对象</a></li>
</ul>
</div>
<h2>JS 课外书</h2>
<ul>
<li><a href="index_pro.htm" title="JavaScript 高级教程">JS 高级教程</a></li>
</ul>
</div>

<div id="maincontent">

<h1>Java基础知识</h1>

<div id="category">
<h2>目录</h2>
<p><a href="#gainian">1.集合的概念</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="#zuoyong">2.集合的作用</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="#duibi">3.与数组的对比</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="#jihekuangjia">4.Java集合框架体系结构</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="#collection">5.Collection接口简介</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p><a href="#exercise1">6.实例练习1</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="#exercise2">7.实例练习2</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="#hana">8.</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="#hana">9.</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="#hana">10.</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
</div>

<div id="gainian">
<h2>一、集合的概念&nbsp;&nbsp;<a href="#category" style="font-size:1px">category</a></h2>
<p>1.现实生活中:很多的事物凑在一起，购物车是商品的集合，军队是军人的集合</p>
<p>2.数学中的集合:具有共同属性的事物的总体</p>
<p>3.Java中的集合类:是一种工具类，就像是容器，储存任意数量的具有共同属性的对象</p>
</div>

<div id="zuoyong">
<h2>二、集合的作用&nbsp;&nbsp;<a href="#category" style="font-size:1px">category</a></h2>
<p>1.在类的内部，对数据进行组织</p>
<p>2.简单而快速地搜索大数量的条目</p>
<p>3.有的集合接口，提供了一系列排列有序的元素，并且可以在序列中间快速的插入或者删除有关元素</p>
<p>4.有的集合接口，提供了映射关系，可以通过关键字(key)去快速查找到对应的唯一对象，而这个关键字可以是任意类型</p>
</div>

<div id="duibi">
<h2>三、与数组的对比--为何选择集合而不是数组&nbsp;&nbsp;<a href="#category" style="font-size:1px">category</a></h2>
<p>1.数组的长度固定，集合长度可变</p>
<p>2.数组只能通过下标访问元素，类型固定，而有的集合可以通过任意类型查找所映射的具体对象</p>
</div>

<div id="jihekuangjia">
<h2>四、Java集合框架体系结构&nbsp;&nbsp;<a href="#category" style="font-size:1px">category</a></h2>
<p>1.Collection和Map是java集合框架中的两个根接口</p>
<p>&nbsp;&nbsp;1.1.Collection有三个子接口:List,Queue,Set</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;1.1.1.List和Queue中存储的元素是排列有序的且可以重复,Set中的元素是无序且不可重复</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.1.1.1.List常用的实现类是ArrayList,Queue的实现类是LinkedList,LinkedList同时也是List接口的一个实现类</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Set有一个很重要的实现类是HashSet</p>
<p>&nbsp;&nbsp;1.2.Map有一个很重要的实现类HashMap</p>
<p>&nbsp;&nbsp;1.3.内部存储:Collection中存储的是一个一个独立的对象,Map中会以&lt;key,value&gt;的映射存储,&lt;key,value&gt;是Entry类
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(键值对)的一个实例,Entry类是Map的一个内部类；key和value可以是任意类型的对象</p>
</div>

<div id="collection">
<h2>五、Collection接口简介&nbsp;&nbsp;<a href="#category" style="font-size:1px">category</a></h2>
<h3>Collection接口</h3>
<p>1.是List,Set,Queue接口的父接口</p>
<p>2.定义了可用于操作List,Set,Queue的方法--增删改查</p>
<h3>List接口及其实现类</h3>
<p>1.List是元素有序且可以重复的集合，被称为序列</p>
<p>2.List可以精确地控制每个元素的插入位置，或删除某个位置元素</p>
<p>3.ArrayList--数组序列,是List的一个重要实现类</p>
<p>4.ArrayList底层是由数组实现的</p>
</div>

<div id="exercise1">
<h2>六、实例练习1&nbsp;&nbsp;<a href="#category" style="font-size:1px">category</a></h2>
<h3>List增删改查</h3>
<pre>
package test;
import java.util.ArrayList;
public class ListTest {
  public static void main(String[] args) {
    ArrayList strings = new ArrayList(); 
    strings.add("Evan"); 
    strings.add("Enguge"); 
    strings.add("Adam"); 
    System.out.println(strings.size()); 
    System.out.println(strings.get(0)); 
    System.out.println(strings.get(1)); 
    strings.set(0, "goodbye"); 
    strings.remove(1); 
    for(int i=0;i&lt;strings.size();i++){
      System.out.println(strings.get(i));
    }
    for(Object s:strings){
      System.out.println(s);}
  }
}
</pre>
<p class="tiy"><a target="_blank" href="">亲自试一试</a></p>
<h3>output</h3>
<pre>
3
Evan
Enguge
goodbye
Adam
goodbye
Adam
</pre>
</div>

<div id="exercise2">
<h2>七、实例练习2&nbsp;&nbsp;<a href="#category" style="font-size:1px">category</a></h2>
<p>实现功能--模拟学生选课功能</p>
<ul>
<li>选择课程(往集合中添加课程)</li>
<li>删除所选的某门课程(删除集合中的元素)</li>
<li>查看所选课程</li>
<li>修改所选课程</li>
</ul>
</div>

<div>
<h2>学生选课--创建学生类和课程类</h2>
<h3>课程类Course.java</h3>
<pre>
package com.abc.collection;
public class Course{
  public String id;
  public String name;  
  public Course(String id,String name){
    this.id=id;
    this.name=name;
  }
}
</pre>
<p class="tiy"><a target="_blank" href="">亲自试一试</a></p>
<pre>
package com.abc.collection;
public class Course{
  private String id;
  public String getId(){
    return id;
  }
  public void setId(String id){
    this.id=id;
  }
}
</pre>
<p class="tiy"><a target="_blank" href="">亲自试一试</a></p>
<h3>学生类Student.java</h3>
<pre>
package com.abc.collection;
import java.util.Set;
import java.util.HashSet;
public class Student{
  public String id;
  public String name;
  public Set courses;
  public Student(String id,String name){
    this.id=id;
    this.name=name;
    this.courses=new HashSet();
  }
}
</pre>
<p class="tiy"><a target="_blank" href="">亲自试一试</a></p>
</div>

<div>
<h2>学生选课--添加课程I</h2>
<h3>备选课程类ListTest.java</h3>
<pre>
package com.abc.collection;
import java.util.List;
import java.util.ArrayList;
public class ListTest{
  //用于存放备选课程的List
  public List coursesToSelect;
  public ListTest(){
    this.coursesToSelect=new ArrayList();
  }
  //用于往coursesToSelect中添加备选课程
  public void testAdd(){
    Course cr1=new Course("1","数据结构");
    coursesToSelect.add(cr1);
    //对象存入集合都变成Object类型,取出时需要类型转换
    Course temp=(Course)coursesToSelect.get(0);
    System.out.println("添加了课程:"+temp.id+","+temp.name);
	
    Course cr2=new Course("2","C语言");
    coursesToSelect.add(0,cr2);
    Course temp2=(Course)coursesToSelect.get(0);
    System.out.println("添加了课程:"+temp2.id+","+temp2.name);
	
    //元素可重复
    coursesToSelect.add(cr1);
    Course temp0=(Course)coursesToSelect.get(2);
    System.out.println("添加了课程:"+temp0.id+","+temp0.name);
	
    Course[] course={new Course("3","离散数学"),new Course("4","汇编语言")};
    coursesToSelect.addAll(Arrays.asList(course));
    Course temp3=(Course)coursesToSelect.get(3);
    Course temp4=(Course)coursesToSelect.get(4);
    System.out.println("添加了两门课程:"+temp3.id+","+temp3.name+";"+temp4.id+","+temp4.name);
	
    Course[] course2={new Course("5","高等数学"),new Course("6","大学英语")};
    coursesToSelect.addAll(2,Arrays.asList(course2));
    Course temp5=(Course)coursesToSelect.get(2);
    Course temp6=(Course)coursesToSelect.get(3);
    System.out.println("添加了两门课程:"+temp5.id+","+temp5.name+";"+temp6.id+","+temp6.name);
  }
  
  //取得List中的元素的方法
  public void testGet(){
    int size=coursesToSelect.size();
    System.out.println("有如下课程待选:");
    for(int i=0;i&lt;size;i++){
      Course cr=(Course)coursesToSelect.get(i);
      System.out.println("课程:"+cr.id+","+cr.name);
    }
  }
  
  //通过迭代器来遍历List,迭代器本身也是一个接口
  public void testIterator(){
    //通过集合的iterator方法,取得迭代器的实例
    Iterator it=coursesToSelect.iterator();
    System.out.println("有如下课程待选(通过迭代器访问):");
    while(it.hasNext()){
      Course cr=(Course)it.next();
      System.out.println("课程:"+cr.id+","+cr.name);
    }
  }
  
  //通过for each方法访问集合元素,for each是迭代器简化的写法
  public void testForEach(){
    System.out.println("有如下课程待选(通过for each访问):");
    for(Object obj:coursesToSelect){
      Course cr=(Course)obj;
      System.out.println("课程:"+cr.id+","+cr.name);
    }
  }
  
  //修改List中的元素
  public void testModify(){
    coursesToSelect.set(4,new Course("7","毛概"));
  }
  
  //删除List中的元素
  public void testRemove(){
    Course cr=(Course)coursesToSelect.get(4);
    System.out.println("我是课程:"+cr.id+","+cr.name+",我即将被删除");
    coursesToSelect.remove(cr);
    System.out.println("成功删除课程!");
    testForEach();
  }
  
  public void testRemove2(){
    System.out.println("即将删除4位置上的课程!");
    coursesToSelect.remove(4);
    System.out.println("成功删除课程!");
    testForEach();
  }
  
  public void testRemove3(){
    System.out.println("即将删除4位置和5位置上的课程!");
    Course[] courses={(Course)coursesToSelect.get(4),(Course)coursesToSelect.get(5)};
    coursesToSelect.removeAll(Arrays.asList(courses));
    System.out.println("成功删除课程!");
    testForEach();
  }
  public static void main(String[] args){
    ListTest lt=new ListTest();
    lt.testAdd();
    lt.testGet();
    lt.testIterator();
    lt.testForEach();
    lt.testModify();
    lt.testForEach();
    lt.testRemove();
  }
}
</pre>
<h3>output</h3>
<pre>添加了课程:1,数据结构
添加了课程:2,C语言
添加了课程:1,数据结构
添加了两门课程:3,离散数学;4,汇编语言
添加了两门课程:5,高等数学;6,大学英语
有如下课程待选:
课程:2,C语言
课程:1,数据结构
课程:5,高等数学
课程:6,大学英语
课程:1,数据结构
课程:3,离散数学
课程:4,汇编语言
有如下课程待选(通过迭代器访问):
课程:2,C语言
课程:1,数据结构
课程:5,高等数学
课程:6,大学英语
课程:1,数据结构
课程:3,离散数学
课程:4,汇编语言
有如下课程待选(通过for each访问):
课程:2,C语言
课程:1,数据结构
课程:5,高等数学
课程:6,大学英语
课程:1,数据结构
课程:3,离散数学
课程:4,汇编语言
有如下课程待选(通过for each访问):
课程:2,C语言
课程:1,数据结构
课程:5,高等数学
课程:6,大学英语
课程:7,毛概
课程:3,离散数学
课程:4,汇编语言
我是课程:7,毛概,我即将被删除
成功删除课程!
有如下课程待选(通过for each访问):
课程:2,C语言
课程:1,数据结构
课程:5,高等数学
课程:6,大学英语
课程:3,离散数学
课程:4,汇编语言
</pre>
<p class="tiy"><a target="_blank" href="">亲自试一试</a></p>
</div>

<div id="intro">
<p><strong>HTML 中的脚本必须位于 &lt;script&gt; 与 &lt;/script&gt; 标签之间。</strong></p>
<p><strong>脚本可被放置在 HTML 页面的 &lt;body&gt; 和 &lt;head&gt; 部分中。</strong></p>
</div>


<div>
<h2>&lt;script&gt; 标签</h2>
<pre>
$(&quot;button&quot;).click(function(){
  $.ajaxSetup({url:&quot;demo_ajax_load.txt&quot;,success:function(result){
    $(&quot;div&quot;).html(result);}});
  $.ajax();
});
</pre>

<p>如需在 HTML 页面中插入 JavaScript，请使用 &lt;script&gt; 标签。</p>

<p>&lt;script&gt; 和 &lt;/script&gt; 会告诉 JavaScript 在何处开始和结束。</p>

<p>&lt;script&gt; 和 &lt;/script&gt; 之间的代码行包含了 JavaScript：</p>

<pre>
&lt;script&gt;
alert(&quot;My First JavaScript&quot;);
&lt;/script&gt;
</pre>

<p>您无需理解上面的代码。只需明白，浏览器会解释并执行位于 &lt;script&gt; 和 &lt;/script&gt; 之间的 JavaScript。</p>

<p>那些老旧的实例可能会在 &lt;script&gt; 标签中使用 type=&quot;text/javascript&quot;。现在已经不必这样做了。JavaScript 是所有现代浏览器以及 HTML5 中的默认脚本语言。</p>
</div>










<div>
<h2>&lt;head&gt; 中的 JavaScript 函数</h2>

<p>在本例中，我们把一个 JavaScript 函数放置到 HTML 页面的 &lt;head&gt; 部分。</p>

<p>该函数会在点击按钮时被调用：</p>

<h3>实例</h3>

<pre>
&lt;!DOCTYPE html&gt;
&lt;html&gt;

&lt;head&gt;
<code>&lt;script&gt;
function myFunction()
{
document.getElementById(&quot;demo&quot;).innerHTML=&quot;My First JavaScript Function&quot;;
}
&lt;/script&gt;</code>
&lt;/head&gt;

&lt;body&gt;

&lt;h1&gt;My Web Page&lt;/h1&gt;

&lt;p id=&quot;demo&quot;&gt;A Paragraph&lt;/p&gt;

&lt;button type=&quot;button&quot; <span class="marked">onclick=&quot;myFunction()&quot;</span>&gt;Try it&lt;/button&gt;

&lt;/body&gt;
&lt;/html&gt;
</pre>

<p class="tiy"><a target="_blank" href="../tiy/t_1127.htm">亲自试一试</a></p>
</div>


<div>
<h2>&lt;body&gt; 中的 JavaScript 函数</h2>

<p>在本例中，我们把一个 JavaScript 函数放置到 HTML 页面的 &lt;body&gt; 部分。</p>

<p>该函数会在点击按钮时被调用：</p>

<h3>实例</h3>

<pre>
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;

&lt;h1&gt;My Web Page&lt;/h1&gt;

&lt;p id=&quot;demo&quot;&gt;A Paragraph&lt;/p&gt;

&lt;button type=&quot;button&quot; <span class="marked">onclick=&quot;myFunction()&quot;</span>&gt;Try it&lt;/button&gt;

<code>&lt;script&gt;
function myFunction()
{
document.getElementById(&quot;demo&quot;).innerHTML=&quot;My First JavaScript Function&quot;;
}
&lt;/script&gt;</code>

&lt;/body&gt;
&lt;/html&gt;
</pre>

<p class="tiy"><a target="_blank" href="../tiy/t_1128.htm">亲自试一试</a></p>

<p class="tip"><span>提示：</span>我们把 JavaScript 放到了页面代码的底部，这样就可以确保在 &lt;p&gt; 元素创建之后再执行脚本。</p>
</div>


<div>
<h2>外部的 JavaScript</h2>

<p>也可以把脚本保存到外部文件中。外部文件通常包含被多个网页使用的代码。</p>

<p>外部 JavaScript 文件的文件扩展名是 .js。</p>

<p>如需使用外部文件，请在 &lt;script&gt; 标签的 &quot;src&quot; 属性中设置该 .js 文件：</p>

<h3>实例</h3>

<pre>
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
&lt;script src=&quot;myScript.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>

<p class="tiy"><a target="_blank" href="../tiy/t_1129.htm">亲自试一试</a></p>

<p>在 &lt;head&gt; 或 &lt;body&gt; 中引用脚本文件都是可以的。实际运行效果与您在 &lt;script&gt; 标签中编写脚本完全一致。</p>

<p class="tip"><span>提示：</span>外部脚本不能包含 &lt;script&gt; 标签。</p>
</div>


<div id="bpn">

</div>




</div>
<!-- maincontent end -->

<div id="sidebar">

<div id="tools">
<h5 id="tools_reference"><a href="../jsref/index.htm">JavaScript 参考手册</a></h5>
<h5 id="tools_example"><a href="../example/jseg_examples.htm">JavaScript 实例</a></h5>
<h5 id="tools_quiz"><a href="js_quiz.htm">JavaScript 测验</a></h5>
</div>



</div>

<div id="footer">
<p id="p1">
简体中文版提供的内容仅用于培训和测试，不保证内容的正确性。通过使用本站内容随之而来的风险与本站无关。
</p>

<p id="p2">
使用条款和隐私条款。版权所有，保留一切权利。
</p>
</div>


</div>
<!-- wrapper end -->

</body>

</html>
